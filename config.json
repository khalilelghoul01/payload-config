{
  "name": "payload",
  "type": "registry:block",
  "dependencies": ["lucide-react", "payload"],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./app/(payload)/admin/[[...segments]]/not-found.tsx",
      "content": "/* THIS FILE WAS GENERATED AUTOMATICALLY BY PAYLOAD. */\n/* DO NOT MODIFY IT BECAUSE IT COULD BE REWRITTEN AT ANY TIME. */\nimport type { Metadata } from 'next'\n\nimport config from '@/payload.config'\nimport { NotFoundPage, generatePageMetadata } from '@payloadcms/next/views'\nimport { importMap } from '../importMap'\n\ntype Args = {\n  params: Promise<{\n    segments: string[]\n  }>\n  searchParams: Promise<{\n    [key: string]: string | string[]\n  }>\n}\n\nexport const generateMetadata = ({ params, searchParams }: Args): Promise<Metadata> =>\n  generatePageMetadata({ config, params, searchParams })\n\nconst NotFound = ({ params, searchParams }: Args) =>\n  NotFoundPage({ config, params, searchParams, importMap })\n\nexport default NotFound\n",
      "type": "registry:example",
      "target": "./app/(payload)/admin/[[...segments]]/not-found.tsx"
    },
    {
      "path": "./app/(payload)/admin/[[...segments]]/page.tsx",
      "content": "/* THIS FILE WAS GENERATED AUTOMATICALLY BY PAYLOAD. */\n/* DO NOT MODIFY IT BECAUSE IT COULD BE REWRITTEN AT ANY TIME. */\nimport type { Metadata } from 'next'\n\nimport config from '@/payload.config'\nimport { RootPage, generatePageMetadata } from '@payloadcms/next/views'\nimport { importMap } from '../importMap'\n\ntype Args = {\n  params: Promise<{\n    segments: string[]\n  }>\n  searchParams: Promise<{\n    [key: string]: string | string[]\n  }>\n}\n\nexport const generateMetadata = ({ params, searchParams }: Args): Promise<Metadata> =>\n  generatePageMetadata({ config, params, searchParams })\n\nconst Page = ({ params, searchParams }: Args) =>\n  RootPage({ config, params, searchParams, importMap })\n\nexport default Page\n",
      "type": "registry:example",
      "target": "./app/(payload)/admin/[[...segments]]/page.tsx"
    },
    {
      "path": "./app/(payload)/api/[...slug]/route.ts",
      "content": "/* THIS FILE WAS GENERATED AUTOMATICALLY BY PAYLOAD. */\n/* DO NOT MODIFY IT BECAUSE IT COULD BE REWRITTEN AT ANY TIME. */\nimport config from '@/payload.config'\nimport '@payloadcms/next/css'\nimport {\n  REST_DELETE,\n  REST_GET,\n  REST_OPTIONS,\n  REST_PATCH,\n  REST_POST,\n  REST_PUT,\n} from '@payloadcms/next/routes'\n\nexport const GET = REST_GET(config)\nexport const POST = REST_POST(config)\nexport const DELETE = REST_DELETE(config)\nexport const PATCH = REST_PATCH(config)\nexport const PUT = REST_PUT(config)\nexport const OPTIONS = REST_OPTIONS(config)\n",
      "type": "registry:example",
      "target": "./app/(payload)/api/[...slug]/route.ts"
    },
    {
      "path": "./app/(payload)/api/graphql/route.ts",
      "content": "/* THIS FILE WAS GENERATED AUTOMATICALLY BY PAYLOAD. */\n/* DO NOT MODIFY IT BECAUSE IT COULD BE REWRITTEN AT ANY TIME. */\nimport config from '@/payload.config'\nimport { GRAPHQL_POST, REST_OPTIONS } from '@payloadcms/next/routes'\n\nexport const POST = GRAPHQL_POST(config)\n\nexport const OPTIONS = REST_OPTIONS(config)\n",
      "type": "registry:example",
      "target": "./app/(payload)/api/graphql/route.ts"
    },
    {
      "path": "./app/(payload)/api/graphql-playground/route.ts",
      "content": "/* THIS FILE WAS GENERATED AUTOMATICALLY BY PAYLOAD. */\n/* DO NOT MODIFY IT BECAUSE IT COULD BE REWRITTEN AT ANY TIME. */\nimport config from '@/payload.config'\nimport '@payloadcms/next/css'\nimport { GRAPHQL_PLAYGROUND_GET } from '@payloadcms/next/routes'\n\nexport const GET = GRAPHQL_PLAYGROUND_GET(config)\n",
      "type": "registry:example",
      "target": "./app/(payload)/api/graphql-playground/route.ts"
    },
    {
      "path": "./app/(payload)/layout.tsx",
      "content": "/* THIS FILE WAS GENERATED AUTOMATICALLY BY PAYLOAD. */\n/* DO NOT MODIFY IT BECAUSE IT COULD BE REWRITTEN AT ANY TIME. */\nimport config from '@/payload.config'\nimport '@payloadcms/next/css'\nimport type { ServerFunctionClient } from 'payload'\nimport { handleServerFunctions, RootLayout } from '@payloadcms/next/layouts'\nimport React from 'react'\n\nimport { importMap } from './admin/importMap.js'\nimport './custom.scss'\n\ntype Args = {\n  children: React.ReactNode\n}\n\nconst serverFunction: ServerFunctionClient = async function (args) {\n  'use server'\n  return handleServerFunctions({\n    ...args,\n    config,\n    importMap,\n  })\n}\n\nconst Layout = ({ children }: Args) => (\n  <RootLayout config={config} importMap={importMap} serverFunction={serverFunction}>\n    {children}\n  </RootLayout>\n)\n\nexport default Layout\n",
      "type": "registry:example",
      "target": "./app/(payload)/layout.tsx"
    },
    {
      "path": "./app/(root)/global.css",
      "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 0 0% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 0 0% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 0 0% 3.9%;\n    --primary: 0 0% 9%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 0 0% 96.1%;\n    --secondary-foreground: 0 0% 9%;\n    --muted: 0 0% 96.1%;\n    --muted-foreground: 0 0% 45.1%;\n    --accent: 0 0% 96.1%;\n    --accent-foreground: 0 0% 9%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 89.8%;\n    --input: 0 0% 89.8%;\n    --ring: 0 0% 3.9%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem\n  }\n  .dark {\n    --background: 0 0% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 0 0% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 0 0% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 0 0% 9%;\n    --secondary: 0 0% 14.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 0 0% 14.9%;\n    --muted-foreground: 0 0% 63.9%;\n    --accent: 0 0% 14.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 14.9%;\n    --input: 0 0% 14.9%;\n    --ring: 0 0% 83.1%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%\n  }\n}\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}",
      "type": "registry:example",
      "target": "./app/(root)/global.css"
    },
    {
      "path": "./app/(root)/layout.tsx",
      "content": "import React from 'react'\nimport './global.css'\n\nfunction layout({ children }: { children: React.ReactNode }) {\n  return (\n    <html>\n      <body>{children}</body>\n    </html>\n  )\n}\n\nexport default layout\n",
      "type": "registry:example",
      "target": "./app/(root)/layout.tsx"
    },
    {
      "path": "./app/(root)/page.tsx",
      "content": "import { getPayload } from 'payload'\nimport React from 'react'\nimport configPromise from '@/payload.config'\n\nasync function page() {\n  const payload = await getPayload({\n    config: configPromise,\n  })\n\n  const data = await payload.find({\n    collection: 'opening-time',\n  })\n  return (\n    <pre>\n      {JSON.stringify(data.docs, null, 2)}\n         </pre>\n  )\n}\n\nexport default page\n",
      "type": "registry:example",
      "target": "./app/(root)/page.tsx"
    },
    {
      "path": "./payload-types.ts",
      "content": "/* tslint:disable */\n/* eslint-disable */\n/**\n * This file was automatically generated by Payload.\n * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,\n * and re-run `payload generate:types` to regenerate this file.\n */\n\nexport interface Config {\n  auth: {\n    users: UserAuthOperations;\n  };\n  collections: {\n    users: User;\n    media: Media;\n    'opening-time': OpeningTime;\n    'payload-locked-documents': PayloadLockedDocument;\n    'payload-preferences': PayloadPreference;\n    'payload-migrations': PayloadMigration;\n  };\n  collectionsJoins: {};\n  collectionsSelect: {\n    users: UsersSelect<false> | UsersSelect<true>;\n    media: MediaSelect<false> | MediaSelect<true>;\n    'opening-time': OpeningTimeSelect<false> | OpeningTimeSelect<true>;\n    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;\n    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;\n    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;\n  };\n  db: {\n    defaultIDType: number;\n  };\n  globals: {};\n  globalsSelect: {};\n  locale: null;\n  user: User & {\n    collection: 'users';\n  };\n  jobs: {\n    tasks: unknown;\n    workflows: unknown;\n  };\n}\nexport interface UserAuthOperations {\n  forgotPassword: {\n    email: string;\n    password: string;\n  };\n  login: {\n    email: string;\n    password: string;\n  };\n  registerFirstUser: {\n    email: string;\n    password: string;\n  };\n  unlock: {\n    email: string;\n    password: string;\n  };\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"users\".\n */\nexport interface User {\n  id: number;\n  updatedAt: string;\n  createdAt: string;\n  email: string;\n  resetPasswordToken?: string | null;\n  resetPasswordExpiration?: string | null;\n  salt?: string | null;\n  hash?: string | null;\n  loginAttempts?: number | null;\n  lockUntil?: string | null;\n  password?: string | null;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"media\".\n */\nexport interface Media {\n  id: number;\n  alt: string;\n  updatedAt: string;\n  createdAt: string;\n  url?: string | null;\n  thumbnailURL?: string | null;\n  filename?: string | null;\n  mimeType?: string | null;\n  filesize?: number | null;\n  width?: number | null;\n  height?: number | null;\n  focalX?: number | null;\n  focalY?: number | null;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"opening-time\".\n */\nexport interface OpeningTime {\n  id: number;\n  days?:\n    | {\n        day: 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday';\n        isClosed?: boolean | null;\n        timeRanges?:\n          | {\n              openTime: {\n                hours: number;\n                minutes: number;\n              };\n              closeTime: {\n                hours: number;\n                minutes: number;\n              };\n              id?: string | null;\n            }[]\n          | null;\n        id?: string | null;\n      }[]\n    | null;\n  specialNotes?: string | null;\n  updatedAt: string;\n  createdAt: string;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"payload-locked-documents\".\n */\nexport interface PayloadLockedDocument {\n  id: number;\n  document?:\n    | ({\n        relationTo: 'users';\n        value: number | User;\n      } | null)\n    | ({\n        relationTo: 'media';\n        value: number | Media;\n      } | null)\n    | ({\n        relationTo: 'opening-time';\n        value: number | OpeningTime;\n      } | null);\n  globalSlug?: string | null;\n  user: {\n    relationTo: 'users';\n    value: number | User;\n  };\n  updatedAt: string;\n  createdAt: string;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"payload-preferences\".\n */\nexport interface PayloadPreference {\n  id: number;\n  user: {\n    relationTo: 'users';\n    value: number | User;\n  };\n  key?: string | null;\n  value?:\n    | {\n        [k: string]: unknown;\n      }\n    | unknown[]\n    | string\n    | number\n    | boolean\n    | null;\n  updatedAt: string;\n  createdAt: string;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"payload-migrations\".\n */\nexport interface PayloadMigration {\n  id: number;\n  name?: string | null;\n  batch?: number | null;\n  updatedAt: string;\n  createdAt: string;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"users_select\".\n */\nexport interface UsersSelect<T extends boolean = true> {\n  updatedAt?: T;\n  createdAt?: T;\n  email?: T;\n  resetPasswordToken?: T;\n  resetPasswordExpiration?: T;\n  salt?: T;\n  hash?: T;\n  loginAttempts?: T;\n  lockUntil?: T;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"media_select\".\n */\nexport interface MediaSelect<T extends boolean = true> {\n  alt?: T;\n  updatedAt?: T;\n  createdAt?: T;\n  url?: T;\n  thumbnailURL?: T;\n  filename?: T;\n  mimeType?: T;\n  filesize?: T;\n  width?: T;\n  height?: T;\n  focalX?: T;\n  focalY?: T;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"opening-time_select\".\n */\nexport interface OpeningTimeSelect<T extends boolean = true> {\n  days?:\n    | T\n    | {\n        day?: T;\n        isClosed?: T;\n        timeRanges?:\n          | T\n          | {\n              openTime?:\n                | T\n                | {\n                    hours?: T;\n                    minutes?: T;\n                  };\n              closeTime?:\n                | T\n                | {\n                    hours?: T;\n                    minutes?: T;\n                  };\n              id?: T;\n            };\n        id?: T;\n      };\n  specialNotes?: T;\n  updatedAt?: T;\n  createdAt?: T;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"payload-locked-documents_select\".\n */\nexport interface PayloadLockedDocumentsSelect<T extends boolean = true> {\n  document?: T;\n  globalSlug?: T;\n  user?: T;\n  updatedAt?: T;\n  createdAt?: T;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"payload-preferences_select\".\n */\nexport interface PayloadPreferencesSelect<T extends boolean = true> {\n  user?: T;\n  key?: T;\n  value?: T;\n  updatedAt?: T;\n  createdAt?: T;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"payload-migrations_select\".\n */\nexport interface PayloadMigrationsSelect<T extends boolean = true> {\n  name?: T;\n  batch?: T;\n  updatedAt?: T;\n  createdAt?: T;\n}\n/**\n * This interface was referenced by `Config`'s JSON-Schema\n * via the `definition` \"auth\".\n */\nexport interface Auth {\n  [k: string]: unknown;\n}\n\n\ndeclare module 'payload' {\n  export interface GeneratedTypes extends Config {}\n}",
      "type": "registry:example",
      "target": "./payload-types.ts"
    },
    {
      "path": "./payload.config.ts",
      "content": "// storage-adapter-import-placeholder\nimport { sqliteAdapter } from '@payloadcms/db-sqlite'\nimport { payloadCloudPlugin } from '@payloadcms/payload-cloud'\nimport { lexicalEditor } from '@payloadcms/richtext-lexical'\nimport path from 'path'\nimport { buildConfig } from 'payload'\nimport { fileURLToPath } from 'url'\nimport sharp from 'sharp'\n\nimport { Users } from './payloads/collections/Users'\nimport { Media } from './payloads/collections/Media'\nimport { Opening } from './payloads/collections/Opening'\n\nconst filename = fileURLToPath(import.meta.url)\nconst dirname = path.dirname(filename)\n\nexport default buildConfig({\n  admin: {\n    user: Users.slug,\n    importMap: {\n      baseDir: path.resolve(dirname),\n    },\n    theme: 'light',\n  },\n  collections: [Users, Media, Opening],\n\n  editor: lexicalEditor(),\n  secret: process.env.PAYLOAD_SECRET || '',\n  typescript: {\n    outputFile: path.resolve(dirname, 'payload-types.ts'),\n  },\n  db: sqliteAdapter({\n    client: {\n      url: process.env.DATABASE_URI || '',\n      authToken: process.env.DATABASE_AUTH_TOKEN || '',\n    },\n  }),\n  sharp,\n  plugins: [\n    payloadCloudPlugin(),\n    // storage-adapter-placeholder\n  ],\n})\n",
      "type": "registry:example",
      "target": "./payload.config.ts"
    },
    {
      "path": "./payloads/collections/Media.ts",
      "content": "import type { CollectionConfig } from 'payload'\n\nexport const Media: CollectionConfig = {\n  slug: 'media',\n  access: {\n    read: () => true,\n  },\n  fields: [\n    {\n      name: 'alt',\n      type: 'text',\n      required: true,\n    },\n  ],\n  upload: true,\n}\n",
      "type": "registry:example",
      "target": "./payloads/collections/Media.ts"
    },
    {
      "path": "./payloads/collections/Opening.ts",
      "content": "import type { CollectionConfig, Field, GlobalConfig } from 'payload'\n\nexport const Opening: CollectionConfig = {\n  slug: 'opening-time',\n  auth: false,\n  defaultPopulate: {\n    openingTime: {\n      populate: {\n        timeRanges: true,\n      },\n    },\n  },\n\n  endpoints: [\n    {\n      path: '/opening-time',\n      method: 'get',\n      handler: async (req) => {\n        const data = await req.payload.find({\n          collection: 'opening-time',\n        })\n\n        const openingTime = data.docs[0]\n\n        return Response.json(openingTime)\n      },\n    },\n  ],\n\n  fields: [\n    {\n      name: 'days',\n      type: 'array',\n      label: 'Opening Hours by Day',\n      maxRows: 7,\n      minRows: 7,\n      defaultValue: [\n        {\n          day: 'monday',\n          isClosed: false,\n          timeRanges: [\n            {\n              openTime: { hours: 9, minutes: 0 },\n              closeTime: { hours: 17, minutes: 0 },\n            },\n          ],\n        },\n        {\n          day: 'tuesday',\n          isClosed: false,\n          timeRanges: [\n            {\n              openTime: { hours: 9, minutes: 0 },\n              closeTime: { hours: 17, minutes: 0 },\n            },\n          ],\n        },\n        {\n          day: 'wednesday',\n          isClosed: false,\n          timeRanges: [\n            {\n              openTime: { hours: 9, minutes: 0 },\n              closeTime: { hours: 17, minutes: 0 },\n            },\n          ],\n        },\n        {\n          day: 'thursday',\n          isClosed: false,\n          timeRanges: [\n            {\n              openTime: { hours: 9, minutes: 0 },\n              closeTime: { hours: 17, minutes: 0 },\n            },\n          ],\n        },\n        {\n          day: 'friday',\n          isClosed: false,\n          timeRanges: [\n            {\n              openTime: { hours: 9, minutes: 0 },\n              closeTime: { hours: 17, minutes: 0 },\n            },\n          ],\n        },\n        {\n          day: 'saturday',\n          isClosed: true,\n        },\n        {\n          day: 'sunday',\n          isClosed: true,\n        },\n      ],\n      admin: {\n        style: {\n          marginBottom: '24px',\n\n          color: '#fff',\n        },\n      },\n      fields: [\n        {\n          name: 'day',\n          type: 'select',\n          required: true,\n          options: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'],\n          admin: {\n            width: '25%',\n            style: {\n              backgroundColor: '#4a5568',\n              color: '#fff',\n              borderRadius: '4px',\n              padding: '8px',\n            },\n          },\n        },\n        {\n          name: 'isClosed',\n          type: 'checkbox',\n          label: 'Closed',\n          defaultValue: false,\n          admin: {\n            width: '25%',\n            style: {\n              alignSelf: 'flex-start',\n              marginTop: '1rem',\n              backgroundColor: '#742a2a',\n              color: '#fff',\n              padding: '8px',\n              borderRadius: '4px',\n            },\n          },\n        },\n        {\n          name: 'timeRanges',\n          type: 'array',\n          label: 'Time Ranges',\n          defaultValue: [\n            {\n              openTime: { hours: 9, minutes: 0 },\n              closeTime: { hours: 17, minutes: 0 },\n            },\n          ],\n          admin: {\n            condition: (data, siblingData) => !siblingData.isClosed,\n            style: {\n              color: '#fff',\n              padding: '16px',\n              borderRadius: '8px',\n              marginTop: '12px',\n            },\n          },\n          fields: [\n            createTimeField({\n              name: 'openTime',\n              label: 'Opening Time',\n              required: true,\n            }),\n            createTimeField({\n              name: 'closeTime',\n              label: 'Closing Time',\n              required: true,\n            }),\n          ],\n        },\n      ],\n    },\n    {\n      name: 'specialNotes',\n      type: 'textarea',\n      label: 'Special Notes',\n      defaultValue: '',\n      admin: {\n        description:\n          'Add any special notes about opening hours (e.g., holiday hours, seasonal changes)',\n        style: {\n          color: '#fff',\n          border: '1px solid #4a5568',\n          borderRadius: '8px',\n          padding: '16px',\n          fontSize: '14px',\n          lineHeight: '1.6',\n        },\n      },\n    },\n  ],\n}\n\nfunction createTimeField({\n  name,\n  label,\n  required = false,\n}: {\n  name: string\n  label: string\n  required?: boolean\n}): Field {\n  return {\n    name,\n    type: 'group',\n    label,\n    fields: [\n      {\n        name: 'hours',\n        type: 'number',\n        required,\n        min: 0,\n        max: 23,\n      },\n      {\n        name: 'minutes',\n        type: 'number',\n        required,\n        min: 0,\n        max: 59,\n      },\n    ],\n    admin: {\n      style: {\n        marginBottom: '16px',\n        color: '#fff',\n      },\n    },\n  }\n}\n",
      "type": "registry:example",
      "target": "./payloads/collections/Opening.ts"
    },
    {
      "path": "./payloads/collections/Users.ts",
      "content": "import type { CollectionConfig } from 'payload'\n\nexport const Users: CollectionConfig = {\n  slug: 'users',\n  admin: {\n    useAsTitle: 'email',\n  },\n  auth: true,\n  fields: [\n    // Email added by default\n    // Add more fields as needed\n  ],\n}\n",
      "type": "registry:example",
      "target": "./payloads/collections/Users.ts"
    },
    {
      "path": "./.env",
      "content": "DATABASE_URI=libsql://demopayload-khalilelghoul01.turso.io\n\nDATABASE_AUTH_TOKEN=eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9.eyJhIjoicnciLCJpYXQiOjE3MzIzOTkyMzAsImlkIjoiNjBiYWM2ZGMtYjJhOC00MDQzLWExMGUtNTkzMzhhYmQ2ZDhjIn0.AFIdOT25xTnWq5PujDClJdxLRLlt-rAsHkSB09Nm3Hku3wIZCoJ8cTs4yVkMyDrwqu1fcI8d5KrSdvv4_14-AA\n\nPAYLOAD_SECRET=f46d2bdb16ae3813a529838c",
      "type": "registry:example",
      "target": "./.env"
    },
    {
      "path": "./package.json",
      "content": "{\n  \"name\": \"project\",\n  \"version\": \"1.0.0\",\n  \"license\": \"MIT\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"build\": \"cross-env NODE_OPTIONS=--no-deprecation next build\",\n    \"dev\": \"cross-env NODE_OPTIONS=--no-deprecation next dev\",\n    \"devsafe\": \"rm -rf .next && cross-env NODE_OPTIONS=--no-deprecation next dev\",\n    \"generate:importmap\": \"cross-env NODE_OPTIONS=--no-deprecation payload generate:importmap\",\n    \"generate:types\": \"cross-env NODE_OPTIONS=--no-deprecation payload generate:types\",\n    \"lint\": \"cross-env NODE_OPTIONS=--no-deprecation next lint\",\n    \"payload\": \"cross-env NODE_OPTIONS=--no-deprecation payload\",\n    \"start\": \"cross-env NODE_OPTIONS=--no-deprecation next start\"\n  },\n  \"dependencies\": {\n    \"@payloadcms/db-sqlite\": \"latest\",\n    \"@payloadcms/next\": \"latest\",\n    \"@payloadcms/payload-cloud\": \"3.1.0\",\n    \"@payloadcms/richtext-lexical\": \"latest\",\n    \"class-variance-authority\": \"^0.7.0\",\n    \"clsx\": \"^2.1.1\",\n    \"cross-env\": \"^7.0.3\",\n    \"graphql\": \"^16.8.1\",\n    \"lucide-react\": \"^0.460.0\",\n    \"next\": \"15.0.0\",\n    \"payload\": \"3.1.0\",\n    \"react\": \"19.0.0-rc-65a56d0e-20241020\",\n    \"react-dom\": \"19.0.0-rc-65a56d0e-20241020\",\n    \"sharp\": \"0.32.6\",\n    \"tailwind-merge\": \"^2.5.5\",\n    \"tailwindcss-animate\": \"^1.0.7\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^22.5.4\",\n    \"@types/react\": \"npm:types-react@19.0.0-rc.1\",\n    \"@types/react-dom\": \"npm:types-react-dom@19.0.0-rc.1\",\n    \"autoprefixer\": \"^10.4.20\",\n    \"eslint\": \"^8\",\n    \"eslint-config-next\": \"15.0.0\",\n    \"postcss\": \"^8.4.49\",\n    \"tailwindcss\": \"^3.4.15\",\n    \"typescript\": \"5.6.3\"\n  },\n  \"engines\": {\n    \"node\": \"^18.20.2 || >=20.9.0\"\n  },\n  \"pnpm\": {\n    \"overrides\": {\n      \"@types/react\": \"npm:types-react@19.0.0-rc.1\",\n      \"@types/react-dom\": \"npm:types-react-dom@19.0.0-rc.1\"\n    }\n  },\n  \"overrides\": {\n    \"@types/react\": \"npm:types-react@19.0.0-rc.1\",\n    \"@types/react-dom\": \"npm:types-react-dom@19.0.0-rc.1\"\n  }\n}\n",
      "type": "registry:example",
      "target": "./package.json"
    }
  ],
  "tailwind": {},
  "cssVars": {},
  "meta": {}
}
